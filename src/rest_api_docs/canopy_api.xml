<doc logo="" toc_title="Canopy REST API" title="Lorem Ipsum">

<chapter title="Authentication">
    <section title="Permission Model">
        The Canopy REST API is used by IoT devices and apps (on behalf of human
        users).

        There are two types of credentials, depending on whether a human user
        or an IoT device is making the request.  Additionally, two types of
        authentication are supported: <b>BASIC AUTH</b> and
        <b>Session-based AUTH</b>.
        <tbl>
            <row>
                <cell header='1'>Credential Type</cell>
                <cell header='1'>HTTP BASIC AUTH</cell>
                <cell header='1'>Session-based AUTH</cell>
                <cell header='1'>Username</cell>
                <cell header='1'>Password</cell>
            </row>
            <row>
                <cell><b>User</b></cell>
                <cell><b>Yes</b></cell>
                <cell><b>Yes</b></cell>
                <cell>Chosen by user</cell>
                <cell>Chosen by user</cell>
            </row>
            <row>
                <cell><b>Device</b></cell>
                <cell><b>Yes</b></cell>
                <cell>Not supported</cell>
                <cell>Device UUID</cell>
                <cell>Device Secret Key</cell>
            </row>
        </tbl>
    </section>

    <section title="Session-based AUTH Login">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    POST /api/login
                    {
                        "username" : &lt;USERNAME_OR_EMAIL&gt;,
                        "password" : &lt;PASSWORD&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    POST /api/login
                    {
                        "username" : "leela",
                        "password" : "P1anetExpre55"
                    }
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -c canopy.cookies -d '{ "username" : "leela", "password" : "P1anetExpre55" }' http://sandbox.canopy.link/api/login
                </mc_item>
            </multicode>
        </subsection>
        <subsection title="Success Response">
            Header:
            <code>
                Set-Cookie:canopy-login-session=&lt;COOKIE_VALUE&gt;
            </code>
            Body:
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    200 OK
                    {
                        "result" : "ok",
                        "username" : &lt;USERNAME&gt;,
                        "email" : &lt;EMAIL&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    200 OK
                    {
                        "result" : "ok",
                        "username" : "leela",
                        "email" : "leela@planetexpress.com"
                    }
                </mc_item>
            </multicode>

        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>bad_input Error</cell>
                    <cell>400</cell>
                    <cell>Non-JSON payload; Required fields missing or incorrect type</cell>
                </row>
                <row>
                    <cell>incorrect_username_or_password Error</cell>
                    <cell>401</cell>
                    <cell>Incorrect username/password combo</cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>

    <section title="Session-based AUTH Logout">
        <subsection title="Request">
            <code> POST /api/logout </code>
        </subsection>
        <subsection title="Success Response">
            The <icode>/api/logout/</icode> endpoint sends this
            response whether or not you were logged in.
            <code syntax='javascript'>
                {
                    "result" : "ok"
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>

    <section title="BASIC AUTH for Users">
        <p>
            To use <b>BASIC AUTH</b>, include the Base64-encoded
            "username:password" in every request.  For example, if your
            username is "leela" and your password is "P1anetExpre55", include
            the following header with your request:
        </p>

        <code>
            Authorization: Basic bGVlbGE6UDFhbmV0RXhwcmU1NQ==
        </code>

        <p>
            Most HTTP libraries and tools can handle BASIC AUTH for you.  For
            example:
        </p>
        <multicode>
            <mc_item title="CURL">
                curl -u leela:P1anetExpre55
            </mc_item>
            <mc_item title="JQUERY">
                $.ajax({
                    username : "leela",
                    password : "P1anetExpre55",
                    ...
                });
            </mc_item>
            <mc_item title="PYTHON">
                from requests.auth import HTTPBasicAuth
                requests.get(url, auth=HTTPBasicAuth('leela', 'P1anetExpre55'))
            </mc_item>
        </multicode>
    </section>

    <section title="BASIC AUTH for Devices">
        Canopy REST API requests can be made by both human users and IoT
        devices.  When an IoT device is making the request:
        <ul>
            <li>The device's <b>UUID</b> is the username.</li>
            <li>The device's <b>Secret Key</b> is the password.</li>
        </ul>

        For example:
        <code>
        For a device with:

            - UUID: d5c827d2-1ba7-4da6-b87b-0864f0969fa8
            - Secret Key: 00ae8a3ba42fa86765c885da90a7fcaec9898acb13fc2e00

        You would:

            Base64Encode("d5c827d2-1ba7-4da6-b87b-0864f0969fa8:00ae8a3ba42fa86765c885da90a7fcaec9898acb13fc2e00")

        And then send this header:

            Authorization: Basic ZDVjODI3ZDItMWJhNy00ZGE2LWI4N2ItMDg2NGYwOTY5ZmE4OjAwYWU4YTNiYTQyZmE4Njc2NWM4
            ODVkYTkwYTdmY2FlYzk4OThhY2IxM2ZjMmUwMA==
        </code>
    </section>

</chapter>

<chapter title="Users">
    <section title="Create a User">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    POST /api/create_user
                    {
                        "username" : string,
                        "email" : string,
                        "password" : string,

                        // optional:
                        "skip-email" : bool
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    POST /api/create_user
                    {
                        "username" : "leela",
                        "email" : "leela@planetexpress.com",
                        "password" : "P1anetExpre55",
                        "skip-email" : true
                    }
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -d '{ "username" : "leela", "email": "leela@planetexpress.com", "password" : "P1anetExpre55" }' http://sandbox.canopy.link/api/create_user
                </mc_item>
            </multicode>
            <tbl>
                <row>
                    <cell header='1'>Field</cell>
                    <cell header='1'>Required</cell>
                    <cell header='1'>Description</cell>
                    <cell header='1'>Validation</cell>
                </row>
                <row>
                    <cell><icode>"username"</icode></cell>
                    <cell><b>Required</b></cell>
                    <cell>Account username</cell>
                    <cell nowrap='1'>string
                        <ul>
                            <li>5-24 characters</li>
                            <li>Characters a-z, A-Z, 0-9 and underscore(_) allowed.</li>
                            <li>Must start with a letter</li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>"email"</icode></cell>
                    <cell><b>Required</b></cell>
                    <cell>Account email</cell>
                    <cell>string
                        <ul>
                            <li>Must be a valid email address.</li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>"password"</icode></cell>
                    <cell><b>Required</b></cell>
                    <cell>Account password</cell>
                    <cell nowrap='1'>string
                        <ul>
                            <li>6-120 characters</li>
                            <li>All characters allowed</li>
                            <li>Case sensitive</li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell nowrap='1'><icode>"skip-email"</icode></cell>
                    <cell>Optional</cell>
                    <cell>Defaults to <icode>false</icode>, meaning a welcome email will be
                    sent to the user.  If <icode>true</icode> the welcome email
                    will not be sent.  This is useful when running tests &amp;
                    simulators that should not send out lots of emails.
                    </cell>
                    <cell>bool
                    </cell>
                </row>
            </tbl>
        </subsection>
        <subsection title="Success Response">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    200 OK
                    {
                        "validated" : false,
                        "email" : &lt;EMAIL&gt;,
                        "result" : "ok",
                        "username" : &lt;USERNAME&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    200 OK
                    {
                        "validated" : false,
                        "email" : "leela@planetexpress.com",
                        "result" : "ok",
                        "username" : "leela",
                    }
                </mc_item>
            </multicode>
        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>bad_input Error</cell>
                    <cell>400</cell>
                    <cell>Non-JSON payload; Required fields missing or incorrect type</cell>
                </row>
                <row>
                    <cell>email_taken Error</cell>
                    <cell>400</cell>
                    <cell>Email not available</cell>
                </row>
                <row>
                    <cell>username_taken Error</cell>
                    <cell>400</cell>
                    <cell>Username not available</cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>
    <section title="Get Current User">
        <subsection title="Request">
            <code>
                GET /api/user/self
            </code>
            This request requires that User credentials have been supplied (or
            a User is logged in), otherwise an error will be returned.
        </subsection>
        <subsection title="Success Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "validated" : &lt;VALIDATED&gt;,
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>not_authenticated Error</cell>
                    <cell>401</cell>
                    <cell>Missing credentials: not logged in and missing BASIC AUTH </cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>
    <section title="Update User Profile">
        <subsection title="Request">
            <code>
                POST /api/user/self
                {
                    "email" : &lt;NEW_EMAIL&gt;,
                    "old_password" : &lt;OLD_PASSWORD&gt;,
                    "new_password" : &lt;NEW_PASSWORD&gt;
                }
            </code>
            All fields are optional, although if <icode>"new_password"</icode>
            is provided then <icode>"old_password"</icode> must be provided as
            well.  Omitted fields will not be modified.
        </subsection>
        <subsection title="Success Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>bad_input Error</cell>
                    <cell>400</cell>
                    <cell>Non-JSON payload; Required fields missing or incorrect type</cell>
                </row>
                <row>
                    <cell>not_authenticated Error</cell>
                    <cell>401</cell>
                    <cell>Missing credentials: not logged in and missing BASIC AUTH </cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>

    <section title="Delete Current User">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    DELETE /api/user/self
                    {
                        "skip-email" : bool
                    }
                </mc_item>
                <mc_item title="REST (no request body)" syntax='javascript'>
                    DELETE /api/user/self
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -X DELETE -u "username:password" http://sandbox.canopy.link/api/me
                </mc_item>
            </multicode>
            The request body may be omitted.
            <tbl>
                <row>
                    <cell header='1'>Field</cell>
                    <cell header='1'>Required</cell>
                    <cell header='1'>Description</cell>
                    <cell header='1'>Validation</cell>
                </row>
                <row>
                    <cell nowrap='1'><icode>"skip-email"</icode></cell>
                    <cell>Optional</cell>
                    <cell>Defaults to <icode>false</icode>, meaning a welcome email will be
                    sent to the user.  If <icode>true</icode> the welcome email
                    will not be sent.  This is useful when running tests &amp;
                    simulators that should not send out lots of emails.
                    </cell>
                    <cell>bool
                    </cell>
                </row>
            </tbl>
        </subsection>
        <subsection title="Success Response">
            <code syntax='javascript'>
                200 OK
                {
                    "result" : "ok",
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>bad_input Error</cell>
                    <cell>400</cell>
                    <cell>Non-JSON payload; Required fields missing or incorrect type</cell>
                </row>
                <row>
                    <cell>not_authenticated Error</cell>
                    <cell>401</cell>
                    <cell>Missing credentials: not logged in and missing BASIC AUTH </cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>
</chapter>

<chapter title="Devices">
    <section title="Create User-Linked Devices">
        <subsection title="Request">
            To create one or more new devices when authenticated as a
            User:
            <code syntax='javascript'>
                POST /api/create_devices
                {
                    "quanitity" : &lt;QUANTITY&gt;
                    "friendly_names" : [&lt;FRIENDLY_NAME&gt;, ...]
                }
            </code>
            This will create new device resource(s) and assign the current
            User to have the "creator" role for those device(s).  This will
            also automatically assign a UUID and Secret Key to each new device
            resource.
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "count" : &lt;COUNT&gt;,
                    "devices" : [ {
                        "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                        "device_id" : &lt;UUID&gt;,
                        "device_secret_key" : &lt;DEVICE_SECRET_KEY&gt;
                    }, ... ]
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            This request may return the following errors:
            <tbl>
                <row>
                    <cell header='1'>Error</cell>
                    <cell header='1'>Response Code</cell>
                    <cell header='1'>Reason</cell>
                </row>
                <row>
                    <cell>bad_input Error</cell>
                    <cell>400</cell>
                    <cell>Non-JSON payload; Required fields missing or incorrect type</cell>
                </row>
                <row>
                    <cell>not_authenticated Error</cell>
                    <cell>401</cell>
                    <cell>Missing credentials: not logged in and missing BASIC AUTH </cell>
                </row>
                <row>
                    <cell>internal_error Error</cell>
                    <cell>500</cell>
                    <cell>Internal error occurred</cell>
                </row>
            </tbl>
        </subsection>
    </section>

    <section title="Create Anonymous Device">
        TBD[Some deployments of the Canopy Cloud Service allow devices to be
        created that are not associated with any User account.  These are
        called "anonymous devices".

        Each anonymous device has a user-assigned Secret Key that is used to
        restrict access.

        Anonymous devices are automatically created whenever the API call
        <icode>/api/my_device</icode> is made using device credentials that
        have never been encountered before.]
    </section>

    <section title="List Devices">
        <subsection title="Request">
            To obtain a list of all devices the current User has access to:
            <code>
                GET /api/me/devices?
                    filter=&lt;FILTER&gt;
                    &amp;sort=&lt;SORT&gt;
                    &amp;limit=&lt;LIMIT&gt;
            </code>
            Details about filtering, sorting, and paginating the results are
            described in the following sections.
        </subsection>
        <subsection title="Filtering Device List">
            <p>
                <icode>&lt;FILTER&gt;</icode> is an expression encoded as a
                string that evaluates to a boolean value.
            </p>
            <p>
                A <icode>&lt;TERM&gt;</icode> corresponds to a single boolean
                test.  A "value test" has the form:
            </p>
            <code>
                &lt;VARIABLE&gt; &lt;RELATION&gt; &lt;VALUE&gt;
            </code>
            For example:
            <code>
                temperature >= 50.8
            </code>
            Valid relations are:
            <tbl>
                <row>
                    <cell header='1'>Relation</cell>
                    <cell header='1'>Description</cell>
                </row>
                <row>
                    <cell>=</cell>
                    <cell>Equals</cell>
                </row>
                <row>
                    <cell>!=</cell>
                    <cell>Does not equal</cell>
                </row>
                <row>
                    <cell>&gt;</cell>
                    <cell>Greater than (numeric and date types only)</cell>
                </row>
                <row>
                    <cell>&gt;=</cell>
                    <cell>Greater than or equal to (numeric and date types only)</cell>
                </row>
                <row>
                    <cell>&lt;</cell>
                    <cell>Less than (numeric and date types only)</cell>
                </row>
                <row>
                    <cell>&lt;=</cell>
                    <cell>Less than or equal to (numeric and date types only)</cell>
                </row>
            </tbl>

            <p>
                A "variable presence test" has the form:
            </p>
            <code>
                HAS &lt;VARIABLE&gt;
            </code>
            For example:
            <code>
                HAS humidity
            </code>
            <p>
                The <icode>!</icode> operator inverts the following TERM.
            </p>
            For example:
            <code>
                !(HAS humidity)
                !(temperature &lt; 10)
            </code>
            The boolean operators &amp;&amp; (AND) and || (OR) are supported:
            <code>
                &lt;TERM&gt; &amp;&amp; &lt;TERM&gt;
                &lt;TERM&gt; || &lt;TERM&gt;
            </code>
            For example:
            <code>
                temperature &gt;= 50.8 &amp;&amp; temperature &lt; 90.5
            </code>
            Valid terms may be the name of any cloud variable, or one of the
            system builtins that begin with <icode>system.</icode>
            <tbl>
                <row>
                    <cell header='1'>Key</cell>
                    <cell header='1'>Description</cell>
                    <cell header='1'>Potential Values</cell>
                </row>
                <row>
                    <cell><icode>system.ws_connection_status</icode></cell>
                    <cell>Is websocket connected?</cell>
                    <cell>
                        <ul>
                            <li><icode>"never_connected"</icode></li>
                            <li><icode>"connected"</icode></li>
                            <li><icode>"disconnected"</icode></li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>system.activity_status</icode></cell>
                    <cell>Has device communicated with remote recently</cell>
                    <cell>
                        <ul>
                            <li><icode>"newly_created"</icode></li>
                            <li><icode>"active"</icode></li>
                            <li><icode>"inactive"</icode></li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>&lt;CLOUD_VAR_NAME&gt;</icode></cell>
                    <cell>Filter based on cloud variable value.</cell>
                    <cell>Depends on cloud variable datatype.</cell>
                </row>
            </tbl>

        Finally, parenthesis can be used to construct larger expressions.  For
        example:
            <code>
                !(temperature &gt;= 50.8 &amp;&amp; temperature &lt; 90.5) or HAS humidity
            </code>

        </subsection>
        <subsection title="Sorting Device List">
            <p><icode>&lt;SORT&gt;</icode> is a sequence of comma-separated keys
                specifying the sort order.  The highest priority key comes first,
                followed by tie breakers.  By default ascending order is used.  To
                sort by a key in descending order, add <icode>!</icode> before the
                key.  For sort order determination, a missing cloud variable comes
                before the minimum value (i.e. at the front of the list when
                ascending, at the end of the list when descending).
            </p>
            <p> 
                This example sorts by temperature (ascending) then, to break
                ties, humidity (descending)
            </p>
            <code>
                temperature,!humidity
            </code>

            The valid keys may be any cloud variable, or builtin.  See
            Filtering Device List.

        </subsection>

        <subsection title="Limits (Pagination)">
            By default a system-defined maximum number of results will be
            returned, or you can provide <icode>start</icode> and
            <icode>count</icode> values to paginate through larger result sets.

            <code>
                limit=&lt;start&gt;,&lt;count&gt;
            </code>

            For example:
            <code>
                limit=0,50
            </code>

            There is an implementation defined maximum limit to the number of
            results that will be returned.  If <icode>count</icode> is above
            this number, then the results will be truncated and the response
            <icode>count</icode> field will tell you how many items are
            actually returned.
        </subsection>

        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "count" : &lt;COUNT&gt;,
                    "devices" : [ {
                        "device_id" : &lt;UUID&gt;,
                        "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                        "status" : {
                            "ws_connected" : &lt;WS_CONNECTED&gt;,
                            "active_status" : &lt;ACTIVE_STATUS&gt;,
                            "last_activity_time" : &lt;LAST_ACTIVITY_TIME&gt;,
                        },
                    }, ...  ]
                }
            </code>
        </subsection>
    </section>
    <section title="Get Single Device">
        <subsection title="Request">
            To obtain information about a single device:
            <code>
                GET /api/device/&lt;UUID&gt;
            </code>
            Or
            <code>
                GET /api/device/self
            </code>
            <p>
                The <icode>/api/device/&lt;UUID&gt;</icode> form of the request
                obtains a specific device by UUID.  The requester (i.e. the
                authenticated User or Device) must have permission to access
                the specified Device, otherwise an error will occur.
            </p>
            <p>
                The second form of the request obtains the currently
                authenticated device (i.e. the device whose credentials were
                supplied via BASIC AUTH).  It returns an error if User
                credentials are supplied.
            </p>
            <p>
                TBD [If the provided device credentials are unknown to the remote,
                and the server supports anonymous devices, then a new anonymous
                device will be created.  If the first form of the request is
                used, then an anonymous device will only be created if the UUID
                in the URI matches the UUID in the credentials, otherwise an
                error will occur.]
            </p>
        </subsection>
        <subsection title="Success Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "device_id" : &lt;UUID&gt;,
                    "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                    "status" : {
                        "ws_connected" : &lt;WS_CONNECTED&gt;,
                        "active_status" : &lt;ACTIVE_STATUS&gt;,
                        "last_activity_time" : &lt;LAST_ACTIVITY_TIME&gt;,
                    },
                    "sddl" : { &lt;SDDL&gt; },
                    "vars" : { &lt;VARS&gt; },
                }
            </code>
        </subsection>
    </section>
    <section title="Get Historical Cloud Var Data">
        <subsection title="Request">
            <code>
                GET /api/device/&lt;UUID&gt;/&lt;VAR_PATH&gt;
            </code>
        </subsection>
    </section>
    <section title="Update Device Properties">
        <subsection title="Request">
            To update device properties:
            <code syntax='javascript'>
                POST /api/device/&lt;UUID&gt;
                {
                    "friendly_name" : &lt;NEW_FRIENDLY_NAME&gt;,
                    "location_note" : &lt;NEW_LOCATION_NOTE&gt;
                }
            </code>
            <p>
                All fields are optional and omitted fields will be left
                unchanged.
            </p>
            <p>
                This may be combined with Add/Update Cloud Var Metadata
                and Update Cloud Var Values into a single request.
            </p>
        </subsection>
    </section>

    <section title="Add/Update Cloud Var Metadata">
        <subsection title="Request">
            <p>
                To add a new cloud variable, or update an existing cloud
                variable's metadata, use:
            </p>
            <code syntax='javascript'>
                POST /api/device/&lt;UUID&gt;
                {
                    "sddl" : {
                        &lt;VAR_DECL&gt; : &lt;VAR_PROPERTIES&gt;,
                        ...
                    }
                }
            </code>
            <p>
                This may be combined with Add/Update Cloud Var Metadata
                and Update Cloud Var Values into a single request.
            </p>
            <p>
                To fully replace the list of cloud variables, add
                <icode>"full-replacement" : true</icode> to the request.
                <code>
                    POST /api/device/&lt;UUID&gt;
                    {
                        "sddl" : {
                            "full-replacement" : true,
                            &lt;VAR_DECL&gt; : &lt;VAR_PROPERTIES&gt;,
                            ...
                        }
                    }
                </code>
            </p>
        </subsection>
    </section>
    <section title='Update Cloud Var Value'>
        <p>
            To update Cloud Variable values, use:
        </p>
        <code syntax='javascript'>
            POST /api/device/&lt;UUID&gt;
            {
                "vars" : {
                    &lt;VAR_NAME&gt; : &lt;NEW_VALUE&gt;,
                    ...
                }
            }
        </code>
        <p>
            This will automatically create a cloud variable for each
            newly-encountered var, unless the device's
            <icode>"auto-var-creation"</icode> property is set to
            <icode>false</icode>.  See Automatic Cloud Variable Creation.
        </p>
        <p>
            This request may be made by either a User or a Device.  The Cloud
            Variable's <icode>direction</icode> property controls who can
            modify it:
        </p>
        <tbl>
            <row>
                <cell header='1'>Direction</cell>
                <cell header='1'>Who Can Modify Value</cell>
            </row>
            <row>
                <cell><icode>out</icode></cell>
                <cell></cell>
            </row>
            <row>
                <cell><icode>in</icode></cell>
                <cell></cell>
            </row>
            <row>
                <cell><icode>inout</icode></cell>
                <cell></cell>
            </row>
        </tbl>
    </section>
</chapter>

<chapter title="Error Responses">
    <section title="Success &amp; Error Reporting">
        A successful API call will have the <icode>200 OK</icode> response code
        and include <icode>"result" : "ok"</icode> in the response:
        <code>
            200 OK
            {
                "result": "ok",
                ...
            }
        </code>
        <p>
        An unsuccesful API call will have a <icode>4XX</icode> or
        <icode>4XX</icode> response code and include <icode>"result" :
        "error"</icode> in the response.  The response will also include an
        <icode>"error_type"</icode> field along with additional details about
        the error if available.
        </p>
    </section>
    <section title="bad_input Error">
        The <icode>"bad_input"</icode> error response is sent when request
        payload validation fails.  For example:
        <code>
            400 BAD REQUEST
            {
                "result" : "error",
                "error_type" : "bad_input",
                "error_msg" : "String \"username\" expected"
            }
        </code>
    </section>
    <section title="email_taken Error">
        The <icode>"email_taken"</icode> error response is sent when creating a
        user or changing a user's email address if the requested email address
        is already in use by a different user.
        The response is:
        <code>
            400 BAD REQUEST
            {
                "result" : "error",
                "error_type" : "email_taken",
            }
        </code>
    </section>
    <section title="incorrect_username_or_password Error">
        The <icode>"incorrect_username_or_password"</icode> error response is
        sent when the provided credentials are incorrect.
        The response is:
        <code>
            401 UNAUTHORIZED
            {
                "result" : "error",
                "error_type" : "incorrect_username_or_password",
            }
        </code>
    </section>
    <section title="not_authenticated Error">
        The <icode>"not_authenticated"</icode> error response is
        sent if the request is missing required authentication credentials.
        The response is:
        <code>
            401 UNAUTHORIZED
            {
                "result" : "error",
                "error_type" : "not_authenticated",
            }
        </code>
    </section>
    <section title="internal_error Error">
        The <icode>"internal_error"</icode> error response is sent when an
        error outside the user's control has occurred.  The response may
        include an <icode>"error_details"</icode> field containing further
        details about the error.  If a panic/crash occurred, the response may
        include an <icode>"error_callstack"</icode> field showing the
        callstack.  For example:
        <code>
            500 INTERNAL SERVER ERROR
            {
                "result" : "error",
                "error_type" : "internal_error",
                "error_msg" : "Unable to connect to database",
                "error_details" : "session has been closed",
            }
        </code>
    </section>
    <section title="username_taken Error">
        The <icode>"username_taken"</icode> error response is sent when creating a
        user if the requested username is already in use by a different user.
        The response is:
        <code>
            400 BAD REQUEST
            {
                "result" : "error",
                "error_type" : "username_taken",
            }
        </code>
    </section>
    <section title="url_not_found Error">
        The <icode>"url_not_found"</icode> error response is sent if the
        requested URL was not found.  This may also occur if the requester does
        not have permission to access the requested resource, in which case
        this response is more secure than a <icode>403 FORBIDDEN</icode>
        response because it does not leak information about the existance of an
        entity.
        The response is:
        <code>
            404 NOT FOUND
            {
                "result" : "error",
                "error_type" : "url_not_found",
            }
        </code>
    </section>
</chapter>

</doc>
