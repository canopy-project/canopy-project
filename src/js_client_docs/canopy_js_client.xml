<doc logo="" toc_title="Javascript Client" title="Lorem Ipsum">

<chapter title="Getting Started">
    The Canopy Javascript Client (<icode>canopy.js</icode>) provides
    easy-to-use Javascript bindings for Canopy.

    <p>
        Currently only browser-based Javascript is supported, with Node.js
        support on its way.
    </p>

    <section title='Using a CDN'>
        The Canopy Javascript Client (<icode>canopy.js</icode>) is hosted on our
        servers.  You can reference the file directly with:
        <code>
            &lt;script src='http://code.canopy.link/adk/js/latest/canopy.js'&gt;&lt;/script&gt;
        </code>
    </section>
    <section title='Downloading'>
        Alternatively, you can download <icode>canopy.js</icode>
        on our <a href='../release.html'><b>Release Package
        Downloads</b></a> page.
    </section>
    <section title='Cloning Source'>
        <p>
            You can clone the git repository with:
        </p>
        <code>
            git clone https://github.com/canopy-project/canopy-js-client
        </code>
        <p>
            The cloned directory contains the file:
        </p>
        <code>
            canopy-js-client/canopy.js
        </code>
    </section>
</chapter>

<chapter title='The Basics'>
    <section title='A Simple Example'>
        This webpage lists the Canopy Devices that are accessible to a User.
        <code syntax="javascript">
            &lt;html&gt;

            &lt;head&gt;
                &lt;title&gt;
                    Canopy Example
                &lt;/title&gt;
                TODO JQUERY
                &lt;script src='http://code.canopy.link/adk/js/latest/canopy.js'&gt;&lt;/script&gt;
            &lt;/head&gt;

            &lt;body id='main'&gt;
            &lt;/body&gt;

            &lt;script&gt;

            Canopy.initUserClient({
                "auth-username" : "myUsername", 
                "auth-password" : "myPassword",
                "host" : "sandbox.canopy.link"
            }).onDone(function(result, data) {
                if (result != CANOPY_SUCCESS) {
                    $("#main").html("Error: " + data.errorMsg)
                    return;
                }
                data.user.devices().getMany(0, 40).onDone(function(result, deviceData) {
                    if (result != CANOPY_SUCCESS) {
                        $("#main").html("Error: " + deviceData.errorMsg)
                        return;
                    }
                    var i;
                    for (i = 0; i &lt; deviceData.devices.length) {
                        var device = deviceData.devices[i];
                        $("#main").append(device.Name() + "(" + device.ID() + "));
                    }
                });
            });
            &lt;/script&gt;

            &lt;/html&gt;
        </code>

    </section>

    <section title='Object Types'>
        The Canopy Javascript Client provides the following object types.

        <code>
            Canopy (global object)

                Singleton object containing the global routines exposed by this
                library.

            CanopyContext

                Outermost object that holds runtime state.

            CanopyRemote

                Contains settings used to connect a remote Canopy Server, along
                with connection-related state when persistent connections are
                in use.

            CanopyUser

                Represents a human user who has a Canopy account on the
                configured CanopyRemote.

            CanopyDevice

                Represents a Canopy-enabled "thing" that has been registered on
                the configured Remote.  This may be physical device or a
                simulator program.

            CanopyDeviceQuery

                Represents a selection of Devices that can filtered, sorted,
                counted and paged through.

            CanopyBarrier

                Used to obtain the results of an asynchronous operation.  Also
                known as a "Promise".

        </code>
    </section>

</chapter>

<chapter title='Canopy (global object)'>
    The Canopy global object is a singleton object containing the global
    routines exposed by this library.
    <section title='Canopy.initContext()'>
        <p>
            Initializes a new CanopyContext.
        </p>
        <p>
            This is the first routine your application must call unless you are
            using one of the alternatives such as Canopy.initUserClient() or
            Canopy.initDeviceClient().
        </p>
        <subsection title='Usage'>
            <code>
                Canopy.initContext()
            </code>
        </subsection>
        <subsection title='Parameters'>
            None
        </subsection>
        <subsection title='Return Value'>
            CanopyContext object
        </subsection>
        <subsection title='Example'>
            <code>
                var ctx = Canopy.initContext();
            </code>
        </subsection>
    </section>

    <section title='Canopy.initUserClient()'>
        <p>
            Helper routine that:
            <ul>
                <li>Initializes a Context</li>
                <li>Configures a Remote</li>
                <li>Fetches the authenticated User</li>
            </ul>
        </p>
        <p>
            Implemented as:
        </p>
        <code syntax='javascript'>
            function initUserClient(params) {
                var ctx = Canopy.initContext();
                var remote = canopy.initRemote(params);
                return remote.getSelfUser();
            }
        </code>
        <p>
            This is the first routine your application must call unless you are
            using one of the alternatives such as Canopy.initContext() or
            Canopy.initDeviceClient().
        </p>
        <subsection title='Usage'>
            <code>
                Canopy.initUserClient(params)
            </code>
        </subsection>
        <subsection title='Parameters'>
            Same as for (CanopyContext).initRemote()
        </subsection>
        <subsection title='Return Value'>
            CanopyBarrier object.

            <p>
                On success, the <icode>data</icode> parameter of the Barrier's
                .onDone() callback will contain the following fields:
            </p>
            <tbl>
                <row>
                    <cell header="1">Field</cell>
                    <cell header="1">Description</cell>
                </row>
                <row>
                    <cell><icode>data.user</icode></cell>
                    <cell>User object representing authenticated user.</cell>
                </row>
            </tbl>
        </subsection>
        <subsection title='Example'>
            <code syntax='javascript'>
            Canopy.initUserClient({
                "auth-username" : "myUsername", 
                "auth-password" : "myPassword",
                "host" : "dev02.canopy.link"
            }).onDone(function(result, data) {
                if (result != CANOPY_SUCCESS) {
                    alert(data.errorMsg);
                    return;
                }
                alert("Hi " + data.user.username());
            });
            </code>
        </subsection>
    </section>
</chapter>

<chapter title='CanopyContext'>
    A CanopyContext is an outermost object representing the library.  You must
    initialize a CanopyContext before you can do anything else by calling either
    Canopy.initContext(), Canopy.initUserClient() or Canopy.initDeviceClient().
    <section title='(CanopyContext).initRemote()'>
        Initializes a Remote object.
        <p>
            Typically you can call Canopy.initUserClient() or
            Canopy.initDeviceClient() to initialize a Remote without calling
            this directly.
        </p>
        <subsection title='Usage'>
            <code>
                Canopy.initRemote(params)
            </code>
        </subsection>
        <subsection title='Parameters'>
            <p>
                Takes a single object as its only parameter.  This object may
                have the following members:
            </p>
            <tbl>
                <row>
                    <cell header="1">Parameter</cell>
                    <cell header="1">Required?</cell>
                    <cell header="1">Datatype</cell>
                    <cell header="1">Description</cell>
                </row>
                <row>
                    <cell><icode>params.auth_username</icode></cell>
                    <cell>Optional</cell>
                    <cell>string</cell>
                    <cell>Username to authenticate with if using BASIC AUTH.
                        Otherwise ignored.  Defaults to <icode>""</icode>.</cell>
                </row>
                <row>
                    <cell><icode>params.auth_password</icode></cell>
                    <cell>Optional</cell>
                    <cell>string</cell>
                    <cell>Password to authenticate with if using BASIC AUTH.
                    Otherwise ignored.  Defaults to <icode>""</icode>.</cell>
                </row>
                <row>
                    <cell><icode>params.host</icode></cell>
                    <cell>Optional</cell>
                    <cell>string</cell>
                    <cell>Hostname or IP address of remote Canopy Server.
                    Defaults to <icode>"sandbox.canopy.link"</icode>.
                    </cell>
                </row>
                <row>
                    <cell><icode>params.http_port</icode></cell>
                    <cell>Optional</cell>
                    <cell>integer</cell>
                    <cell>Port to use if using HTTP.  Otherwise ignored.
                    Defaults to <icode>80</icode>.
                    </cell>
                </row>
                <row>
                    <cell><icode>params.https_port</icode></cell>
                    <cell>Optional</cell>
                    <cell>integer</cell>
                    <cell>Port to use if using HTTPS.  Otherwise ignored.
                    Defaults to <icode>443</icode>.
                    </cell>
                </row>
                <row>
                    <cell><icode>params.skip_cert_check</icode></cell>
                    <cell>Optional</cell>
                    <cell>boolean</cell>
                    <cell>When <icode>true</icode>, skips the validation of the
                    Canopy Server's SSL certificate, if such skipping is
                    possible.  Note that most browsers do not allow this check
                    to be skipped and will display a warning to the user.
                    WARNING: This option is highly insecure and should never be
                    used in production.  Defaults to <icode>false</icode>.
                    </cell>
                </row>
                <row>
                    <cell><icode>params.use_http</icode></cell>
                    <cell>Optional</cell>
                    <cell>boolean</cell>
                    <cell>When <icode>true</icode>, forces the use of HTTP
                    instead of HTTPS.  WARNING: This option is highly insecure
                    and should never be used in production.  Defaults to
                    <icode>false</icode>.
                    </cell>
                </row>
            </tbl>
        </subsection>
        <subsection title='Return Value'>
            CanopyContext object
        </subsection>
        <subsection title='Example'>
            <code>
                var ctx = Canopy.initContext();
            </code>
        </subsection>
    </section>

    <section title='(CanopyContext).shutdown()'>
        Shuts down a CanopyContext closing and freeing all resources that can
        be closed or freed.  Let's face it: you are writing a web application
        and it is unlikely that you will ever actually call this.  But we
        provide it here anyway for completeness.

        <subsection title='Usage'>
            <code>
                (CanopyContext).shutdown()
            </code>
        </subsection>

        <subsection title='Parameters'>
            None
        </subsection>

        <subsection title='Return Value'>
            Integer error code.  CANOPY_SUCCESS on success.
        </subsection>

        <subsection title='Example'>
            <code>
                // Silly example:
                Canopy.initContext().shutdown();
            </code>
        </subsection>
    </section>
</chapter>

</doc>

