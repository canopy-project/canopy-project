<doc logo="" toc_title="C/C++ Client" title="Lorem Ipsum">

<chapter title="Installation">
    The Canopy C/C++ Client is part of the Canopy Embedded Development Kit (EDK).
    The EDK uses <icode>repo</icode>, which is a tool that makes it easier
    to work with multiple git repositories.

    <section title='Prerequisites'>
        <subsection title='Installing Required Packages (Ubuntu 14.04)'>
            <code>sudo apt-get install g++ git rpm cmake zlib1g-dev libssl-dev curl libcurl4-openssl-dev dialog</code>
        </subsection>
        <subsection title='Installing Repo'>
            <p>
                Download <icode>repo</icode> and put it somewhere in your <icode>PATH</icode>:
            </p>
            <code>
                curl https://storage.googleapis.com/git-repo-downloads/repo &gt; repo
                chmod a+x repo
                sudo cp repo /usr/local/bin
            </code>
        </subsection>
    </section>
    <section title='Downloading the Source'>
        <subsection title='Initializing a Repo Client'>
            <p>
                After installing <icode>repo</icode>, set up your client to access the Canopy
                EDK repository.
            </p>
            <p>
                1) Create a working directory.  You can call it anything you like:
            </p>
            <code>
                mkdir canopy_edk
                cd canopy_edk
            </code>
            <p>
                2) Run <icode>repo init</icode> to initialize the client repository.
            </p>
            <code>
                repo init -u https://github.com/canopy-project/canopy-embedded-manifest
            </code>
            <p>
                To check out a branch other than "master", specify it with -b:
            </p>
            <code>
                repo init -u https://github.com/canopy-project/canopy-embedded-manifest -b beta
            </code>
            <p>
                3) Use <icode>repo sync</icode> to download sources to your working directory:
            </p>
            <code>
                repo sync
            </code>
        </subsection>
    </section>
    <section title='Building and Installing libcanopy'>
        <subsection title='Initializing the Build Environment'>
            Canopy's build system expects certain environment variables to
            be set, which are initialized with the <icode>envsetup.sh</icode>
            script.  Use this script to select the target platform and
            build flavor (i.e. debug or release).

            <p/>For example, from the <icode>build/</icode> directory:

            <code>
                source envsetup.sh linux-default debug
            </code>
            
            If you have <icode>dialog</icode> installed on your system, you can
            interactively configure your build by simply running:
            <code>
                source envsetup.sh
            </code>

            If you do not have <icode>dialog</icode> installed, the
            <icode>envsetup.sh</icode> script will simply list the available
            options.
        </subsection>
        <subsection title='Building and Installing'>
            <p>
                To build and install the Canopy EDK, from <icode>build/</icode> run:
            </p>
            <code>
                make
                sudo make install
            </code>
        </subsection>
    </section>
</chapter>
<chapter title='The Basics'>
    <section title='A Simple Example'>
        This simple program initializes <icode>libcanopy</icode> and posts some
        data
        to the cloud.  Error checking is omitted for clarity.
        <code syntax="c">
            #include &lt;canopy.h&gt;

            int main(void) {
                CanopyContext ctx;
                float32 humidity = 0.0;

                ctx = canopy_init_context();

                canopy_set_opt(
                    CANOPY_CLOUD_HOST, "sandbox.canopy.link",
                    CANOPY_DEVICE_UUID, &lt;YOUR UUID HERE&gt;
                    CANOPY_DEVICE_SECRET_KEY, &lt;YOUR SECRET KEY HERE&gt;
                );

                canopy_var_init(ctx, "out float32 humidity");

                // Your sensor-reading code goes here.
                //humidity = ReadHumiditySensor();

                canopy_var_set_float32(ctx, "humidity", humidity);

                canopy_sync_blocking(ctx, 10000);

                return 0;
            }
        </code>
    </section>
    <section title='Compiling and Running'>
        <subsection title='Compiling'>
            <p>
                You can compile your program with a normal C/C++ compiler, such as GCC.
            </p>
            <p>
                When you installed <icode>libcanopy</icode> it should have copied
                <icode>canopy.h</icode> to somewhere in your include path, such as
                <icode>/usr/local/include/canopy.h</icode>.  If
                <code>libcanopy</code> is not in your path you will need to add
                it with something like:
            </p>
            <code>
                gcc -Wall -g -I~/canopy_edk/libcanopy/include -C example.c -o example.o
            </code>
        </subsection>
        <subsection title='Linking'>
            <p>
                You must link your program with the following shared libraries:
                <ul>
                    <li><icode>libcanopy</icode></li>
                    <li><icode>libsddl</icode></li>
                    <li><icode>libred-canopy</icode></li>
                    <li><icode>libwebsockets-canopy</icode> or <icode>libwebsockets</icode></li>
                    <li><icode>libcurl</icode></li>
                </ul>
            </p>
            <p>
                Some of the libraries that <icode>libcanopy</icode> depends on, such as
                <icode>libwebsockets</icode> are included in the EDK repo.  The EDK build
                system will append <icode>-canopy</icode> to the library object file name (for
                example <icode>libwebsockets-canopy</icode>) in order to prevent collisions
                with other versions of those libraries that may already be installed on
                your system.
            </p>
            <code>
                gcc -Wall -g -lred-canopy -lcanopy -lsddl -lcurl -lwebsockets-canopy example.o -o example
            </code>
            <p>
                If you haven't installed <icode>libcanopy</icode>, you may need to add the
                appropriate directory(ies) to the library path.  For example:
            </p>
            <code>
            gcc -Wall -g -L~/canopy_edk/build/_out/lib -lred-canopy -lcanopy -lsddl -lcurl -lwebsockets-canopy example.o -o example
            </code>
        </subsection>
        <subsection title='Running'>
            <p>
                If you've installed <icode>libcanopy</icode>, you should be able to just run
                your program, for example, with:
            </p>
            <code>
                ./example
            </code>
            <p>
                You may need to add the appropriate path to <icode>LD_LIBRARY_PATH</icode> or
                <icode>DYLD_LIBRARY_PATH</icode>:
            </p>
            <code>
                LD_LIBRARY_PATH=~/canopy_edk/build/_out/lib ./example
            </code>
        </subsection>
    </section>
</chapter>

<chapter title='Initialization'>
    <section title='canopy_init_context'>
        <code syntax='c'>
            CanopyContext canopy_init_context();
        </code>
        <p>
            Initialize <icode>libcanopy</icode> and create a context.  
        </p>
        <p>
            This may be called multiple times to create multiple contexts,
            which may be useful for unit testing, or if you need to talk to
            multiple canopy servers.
        </p>
        <p>
            The new context is configured based on environment variables, falling back
            to default settings.
        </p>
        <p>
            <b>Returns</b> a handle to the newly-create context object.
            Returns <icode>NULL</icode> on error.
        </p>
        <subsection title='Example'>
            <code syntax='c'>
                CanopyContext ctx;
                ctx = canopy_init_context();
                if (!ctx) {
                    canopy_write_error(stderr, NULL, "Failed to initialize Canopy context");
                }
            </code>
        </subsection>
    </section>
    <section title='canopy_set_opt'>
        <code syntax='c'>
            CanopyResultEnum canopy_set_opt(CanopyContext ctx, 
                    [OPTION_NAME, OPTION_VALUE,]
                    ...
            );
        </code>
        <p>
            Set a context-wide option.
        </p>
        <p>
            Takes an odd number of arguments.  After the first argument
            (<icode>ctx</icode>), the arguments must must alternate between
            option identifiers and values.  The option pars may appear in any
            order, but each option may be provided at most once.
        </p>
        <p>
            Accepted options are:
        </p>
        <ul>
            <li><icode>CANOPY_CLOUD_HOST</icode></li>
            <li><icode>CANOPY_HTTP_PORT</icode></li>
            <li><icode>CANOPY_HTTPS_PORT</icode></li>
            <li><icode>CANOPY_WS_PORT</icode></li>
            <li><icode>CANOPY_WSS_PORT</icode></li>
            <li><icode>CANOPY_DEVICE_UUID</icode></li>
            <li><icode>CANOPY_DEVICE_SECRET_KEY</icode></li>
        </ul>
        <p>
            <b>Returns</b> <icode>CANOPY_SUCCESS</icode> on success, otherwise
            an error code.
        </p>
        <subsection title='Example'>
            <code syntax='c'>
                CanopyResultEnum result;
                
                // Does nothing with no option arguments:
                canopy_set_opt(ctx);

                // You can set several options at once:
                result = canopy_set_opt(ctx,
                    CANOPY_CLOUD_SERVER, "localhost:8080",
                    CANOPY_DEVICE_UUID, "16eeca6a-e8dc-4c54-b78e-6a7416803ca8",
                    CANOPY_DEVICE_SECRET_KEY, "My Secret"
                );
                if (result != CANOPY_SUCCESS) {
                    canopy_write_error(stderr, ctx, "Failed to set options");
                }
            </code>
        </subsection>
    </section>
</chapter>

<chapter title='Cloud Variables'>
    <section title='canopy_var_init'>
        <code syntax='c'>
            CanopyResultEnum canopy_var_init(CanopyContext ctx, 
                    const char *decl,
                    [OPTION_NAME, OPTION_VALUE,]
                    ...
            );
        </code>
    </section>
    <section title='canopy_var_set'>
        <code syntax='c'>
            CanopyResultEnum canopy_var_set(CanopyContext ctx, const char *varname, CanopyVarValue value);

            CanopyResultEnum canopy_var_set_bool(CanopyContext ctx, const char *varname, bool value);
            CanopyResultEnum canopy_var_set_float32(CanopyContext ctx, const char *varname, float value);
            CanopyResultEnum canopy_var_set_float64(CanopyContext ctx, const char *varname, double value);
            CanopyResultEnum canopy_var_set_int8(CanopyContext ctx, const char *varname, int8_t value);
            CanopyResultEnum canopy_var_set_int16(CanopyContext ctx, const char *varname, int16_t value);
            CanopyResultEnum canopy_var_set_int32(CanopyContext ctx, const char *varname, int32_t value);
            CanopyResultEnum canopy_var_set_string(CanopyContext ctx, const char *varname, const char *value);
            CanopyResultEnum canopy_var_set_uint8(CanopyContext ctx, const char *varname, uint8_t value);
            CanopyResultEnum canopy_var_set_uint16(CanopyContext ctx, const char *varname, uint16_t value);
            CanopyResultEnum canopy_var_set_uint32(CanopyContext ctx, const char *varname, uint32_t value);
        </code>
    </section>
    <section title='canopy_var_get'>
    </section>
    <section title='canopy_var_on_change'>
    </section>
    <section title='CANOPY_VALUE_ macros'>
    </section>
    <section title='CANOPY_READ_ macros'>
    </section>
</chapter>

<chapter title="Notifications">
    <section title='canopy_notify'>
    </section>
</chapter>

<chapter title="Synchronization">
    <section title='canopy_sync_blocking'>
    </section>
    <section title='canopy_once_every'>
    </section>
</chapter>

<chapter title="Error Handling">
    <section title='Error Codes'>
        Most <icode>libcanopy</icode> routines return an error code, indicating
        success or the reason for failure.

        <tbl>
            <row>
                <cell header="1">Enum Value </cell>
                <cell header="1">Meaning</cell>
            </row>
            <row>
                <cell><icode>CANOPY_SUCCESS</icode></cell>
                <cell>Command succeeded</cell>
            </row>
            <row>
                <cell><icode>ERROR_UNKNOWN</icode></cell>
                <cell>An unknown error occured</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_CONNECTION_FAILED</icode></cell>
                <cell>Unable to connect to cloud server.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_REDUNDANT_PARAMETER</icode></cell>
                <cell>A single parameter was provided too many times to a routine.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_PROMISE_NOT_COMPLETE</icode></cell>
                <cell> The requested operation cannot be performed on a non-completed promise.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_INVALID_OPT</icode></cell>
                <cell> A supplied option was invalid.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_OUT_OF_MEMORY</icode></cell>
                <cell> You need to add more RAM :-)</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_BAD_VARIABLE_DECLARATION</icode></cell>
                <cell>Cloud Variable declaration could not be parsed.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_SINGLE_USE_VALUE_ALREADY_USED</icode></cell>
                <cell>A single-use Cloud Variable value has already been used as an argument.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_INCORRECT_DATATYPE</icode></cell>
                <cell>The provided datatype does not match the dataype expected.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_INVALID_VALUE</icode></cell>
                <cell>An invalid value was provided as a parameter.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_PARSING_PAYLOAD</icode></cell>
                <cell>Unable to parse received payload.</cell>
            </row>
            <row>
                <cell><icode>CANOPY_ERROR_PROCESSING_PAYLOAD</icode></cell>
                <cell>Error processing received payload.</cell>
            </row>
        </tbl>
    </section>
    <section title='canopy_error_msg'>
    </section>
    <section title='canopy_write_error'>
    </section>
</chapter>

</doc>

